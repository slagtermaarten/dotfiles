snippet bro "browser invocation"
browser()${0}
endsnippet

snippet pbro "Permanent browser invocation"
browser(text = '${2:unsuspected}', expr = ${1})${0}
endsnippet

snippet tb
traceback()
endsnippet

snippet db "Debug"
debug(${VISUAL}$1)${0}
endsnippet

snippet dbo "Debug"
debugonce(${VISUAL}$1)${0}
endsnippet

snippet udb "Undebug"
undebug(${VISUAL}$1)${0}
endsnippet

snippet el "Named element of list or named vector" i
['${1}${VISUAL}']${0}
endsnippet

snippet elu "Unnamed element of list or named vector" i
[['${1}${VISUAL}']]${0}
endsnippet

snippet eluf "assign" i
assign('${1}${VISUAL}', ${2}${VISUAL},
       ${2:parent.env(parent.frame(1))})
endsnippet

snippet br "Numerical element of list or vector" i
[${1}${VISUAL}]${0}
endsnippet

snippet brr "Numerical element of list or vector" i
[[${1}${VISUAL}]]${0}
endsnippet

snippet p
print(${VISUAL}${1})${0}
endsnippet

snippet #! "Hashbang for Rscript (#!)" b
#!/usr/bin/env Rscript
endsnippet

snippet lib "Import a library"
library(${0:package})
endsnippet

snippet req "Require a file"
require(${0:package})
endsnippet

snippet source "Source a file"
source('${0:file}')
endsnippet

snippet if "If statement"
if (${1}) {
  ${0}${VISUAL}
}
endsnippet

snippet eif "Else-If statement"
else if (${1}) {
  ${0}${VISUAL}
}
endsnippet

snippet el "Else statement"
else {
  ${0}${VISUAL}
}
endsnippet

snippet ife "if .. else"
if (${1}) {
  ${2}${VISUAL}
} else {
  ${3}${VISUAL}
}
endsnippet

snippet wh "while loop"
while(${1}) { ${2}${VISUAL} }
endsnippet

snippet for "for loop"
for (${1:item} in ${2:list}) { ${3}${VISUAL} }
endsnippet

snippet fun "Function definition"
${1:name} <- function(${2}) {
  ${0}${VISUAL}
}
endsnippet

snippet af "Anonymous function"
function(${1:x}) { ${0}${VISUAL} }
endsnippet

snippet ret "Return call"
return(${0}${VISUAL})
endsnippet

snippet df "Data frame"
${1:name}[${2:rows}, ${0:cols}]
endsnippet

snippet c "c function"
c(${0:items}${VISUAL})
endsnippet

snippet li "list function"
list(${0:items}${VISUAL})
endsnippet

snippet mat "matrix function"
matrix(${1:data}${VISUAL}, nrow = ${2:rows}, ncol = ${0:cols})
endsnippet

snippet apply "apply function"
apply(${1:array}${VISUAL}, ${2:margin}, ${0:function})
endsnippet

snippet lapply "lapply function"
lapply(${1}${VISUAL}, function(${2:x}) { ${3} })
endsnippet

snippet sapply "sapply function"
sapply(${1:list}${VISUAL}, ${0:function})
endsnippet

snippet vapply "vapply function"
vapply(${1:list}${VISUAL}, ${2:function}, ${0:type})
endsnippet

snippet mapply "mapply function"
mapply(${1:function}${VISUAL}, ${0:...})
endsnippet

snippet tapply "tapply function"
tapply(${1:vector}${VISUAL}, ${2:index}, ${0:function})
endsnippet

snippet rapply "rapply function"
rapply(${1:list}${VISUAL}, ${0:function})
endsnippet

snippet llply "plyr::llply function"
plyr::llply(${1}${VISUAL}, function(${2:x}) {
	${3}
}, .parallel = ${4:F}, .progress = ${5:T})
endsnippet

snippet pl "Plot function"
plot(${1:x}${VISUAL}, ${0:y})
endsnippet

snippet ggp "ggplot2 plot"
ggplot(${1:data}${VISUAL}, aes(${0:aesthetics}))
endsnippet

snippet gga "add to ggplot2 plot"
${1:p1} <- $1 + ${0}
endsnippet

snippet fis "Fisher test"
fisher.test(${1:x}, ${0:y})
endsnippet

snippet chi "Chi Squared test"
chisq.test(${1:x}, ${0:y})
endsnippet

snippet tt "t-test"
t.test(${1:x}, ${0:y})
endsnippet

snippet wil "Wilcox test"
wilcox.test(${1:x}, ${0:y})
endsnippet

snippet cor "Correlation test"
cor.test(${1:x}, ${0:y})
endsnippet

snippet fte "FTE test"
var.test(${1:x}, ${0:y})
endsnippet

snippet kvt "KV test"
kv.test(${1:x}, ${0:y})
endsnippet

snippet sys "System call"
system("${1}${VISUAL}")${0}
endsnippet

snippet pa "Paste call"
paste(${1}${VISUAL}, sep = "")${0}
endsnippet

snippet timeprint "System time + print statement"
system.time(print(
${1}${VISUAL}
))
${0}
endsnippet

snippet round "Round numerical value"
round(${1}${VISUAL}, digits = ${0:2})
endsnippet

snippet signif "Round numerical value"
signif(${1}${VISUAL}, digits = ${0:2})
endsnippet

snippet ar "Assignment operator"
<- ${0}
endsnippet

snippet tc "tryCatch"
tryCatch(${1}${VISUAL}, error = function(e) ${2:{ print(e); browser() }}) ${0}
endsnippet

snippet mltc "multi-line tryCatch"
tryCatch({
  ${1}${VISUAL}
}, error = function(e) ${2:{ print(e) }}) ${0}
endsnippet

snippet ser "serializer"
serializer(${1}${VISUAL})
endsnippet

snippet rox "ROxygen function header"
#' ${1}${VISUAL}
#'
#'
endsnippet

snippet inv "Invisible return"
invisible(${1}${VISUAL})
endsnippet

snippet isna "Test for NA"
is.na(${1}${VISUAL})
endsnippet

snippet pf "Parent frame for use in data.table's j"
parent.frame(4)$${1:objectname}
endsnippet

snippet fp "File path"
file.path(${1}${VISUAL})${0}
endsnippet

snippet qs "Quick sub sample"
sample(${1}${VISUAL}, 10)${0}
endsnippet

snippet sn "Set names of vector"
setNames(${1}${VISUAL}, ${2:NULL})${0}
endsnippet

snippet cn "Colnames method"
colnames(${1}${VISUAL})${0}
endsnippet

snippet whi "Which method"
which(${1}${VISUAL})${0}
endsnippet

snippet it "Italic"
italic(${1}${VISUAL})${0}
endsnippet

snippet igtab "Initialize gtable"
gt <- gtable(widths = unit(${1:c(1, 1)}, "null"), height = unit(${2:c(1, 1)}, "null"))
endsnippet

snippet gtab "ggplot to gtable"
ggplot_gtable(ggplot_build(${1}${VISUAL}))${0}
endsnippet

snippet agrob "add grob to gtable"
gt <- gtable_add_grob(gt, ${1}${VISUAL}, ${2:1}, ${3:1})${0}
endsnippet

snippet dgtab "Draw gtable"
grid.newpage()
grid.draw(gt)
endsnippet

snippet "ifu?n?ar?g?u?m?e?n?t?" "Identical function argument" r
${1:arg} = $1$0
endsnippet

snippet pale?t?t?e "Develop an R color palette"
cols <- ${1}${VISUAL}
cols <- setNames(gen_color_vector(name = 'Royal1',
																	n = length(cols)), names(cols))
plot_palette(cols)
endsnippet

snippet "co" "Clear serialized object"
clear_object(${1}${VISUAL}, ${2:sr})${0}
endsnippet

snippet "srds" "Save rds file" r
saveRDS(${1:arg}, file.path(${2:rds_dir}, '$1.rds'))
endsnippet

snippet "rrds" "Read rds file" r
${1:arg} <- readRDS(file.path(${2:rds_dir}, '$1.rds'))
endsnippet

snippet "crrds" "Conditionally read rds file" r
if (!exists('${1:arg}'))
	 $1 <- readRDS(file.path(${2:rds_dir}, '$1.rds'))
endsnippet

snippet "ip" "Install package"
install.packages('${1:arg}${VISUAL}')
endsnippet

snippet "rp" "Remove package"
remove.packages('${1}${VISUAL}')
endsnippet

snippet coms "Commented out vim section"
## {{{ ${1}
${VISUAL}
## }}} $1 
endsnippet

snippet cp "Config parallel"
ncores <- ${1}
doParallel::registerDoParallel(cores = ncores)
endsnippet

snippet fr "File remove"
file.remove(${1}${VISUAL})${0}
endsnippet

snippet bpsr "Boiler-plate serializer: store results if not already computed"
o_fn <- file.path(rds_dir, glue::glue('${1:objectname}'))
if (!file.exists(o_fn) || redo) {
	$1 <- ${VISUAL}
	saveRDS($1, o_fn)
} else {
	$1 <- readRDS(o_fn)
}
endsnippet
